name: ✅ Simple CI

# Minimal required permissions for the workflow
permissions:
  contents: read       # Required for checking out code and read operations
  security-events: write  # Required for security scanning
  actions: read        # Required for using actions
  packages: read       # For downloading dependencies
  checks: write        # For creating check runs
  pull-requests: write # For PR comments

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_CACHE_DIR: ~/.cache/pip
  PIP_DISABLE_PIP_VERSION_CHECK: 1

jobs:
  test:
    name: 🧪 Tests & Code Quality
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.11']
        include:
          - os: windows-latest
            python-version: '3.11'
          - os: ubuntu-latest
            python-version: '3.12'

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v5

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Cache Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.local/share/pip-cache
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('requirements.txt', 'setup.py') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ matrix.python-version }}-
          ${{ runner.os }}-python-

    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e ".[dev,test]" --prefer-binary
        pip install pytest pytest-cov ruff mypy safety bandit

    - name: 🧪 Validate Package Structure
      run: |
        python -c "import src.telegram_audio_downloader; print('✅ Package imports successfully')"
        python -c "from src.telegram_audio_downloader import __version__; print(f'✅ Version: {__version__}')"

    - name: 🔒 Security Checks
      run: |
        echo "🔍 Running security vulnerability scan..."
        safety check --full-report || echo "⚠️  Safety check completed with findings"
        
        echo "🔐 Running code security analysis..."
        bandit -r src/ -f json -o reports/bandit.json || echo "⚠️  Bandit analysis completed with findings"

    - name: 🎯 Code Quality Checks
      run: |
        echo "🔍 Running Ruff linter..."
        ruff check src/ --output-format=github
        echo "📐 Running type checks..."
        mypy src/ --ignore-missing-imports

    - name: 🧪 Run Tests
      run: |
        python -m pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=term
      continue-on-error: false

    - name: 📊 Upload Coverage
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v5
      with:
        fail_ci_if_error: false

    - name: 🛡️ Security Report
      if: always()
      run: |
        echo "## 🔒 Security Check Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Security scanning completed" >> $GITHUB_STEP_SUMMARY

  docker-test:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'docker')

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v5

    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🐳 Test Docker Build
      run: |
        if [ -f "Dockerfile" ]; then
          docker buildx build --platform linux/amd64 -t telegram-audio-downloader:test . --load
          echo "✅ Docker build successful"
        else
          echo "⚠️ No Dockerfile found, skipping Docker test"
        fi

  security-scan:
    name: 🛡️ Dependency Security Scan
    runs-on: ubuntu-latest
    needs: test
    # Run only on main branch or for pull requests
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v5

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 🔧 Install Security Tools
      run: |
        python -m pip install --upgrade pip
        pip install safety

    - name: 🛡️ Run Dependency Security Scan
      id: security
      continue-on-error: true
      run: |
        echo "Running dependency security scan..."
        safety check --full-report --output-format json > security-report.json || echo "Security scan completed"
        echo "exit_code=$?" >> $GITHUB_OUTPUT

    - name: 📋 Security Scan Summary
      run: |
        echo "## 🛡️ Dependency Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f "security-report.json" ]; then
          echo "✅ Security scan report generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        fi

  notify:
    name: 📢 CI Results
    runs-on: ubuntu-latest
    needs: [test, docker-test, security-scan]
    if: always() && github.event_name == 'push'

    steps:
    - name: 📊 Report Status
      run: |
        echo "## 📊 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "📝 **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "✅ **Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.docker-test.result }}" = "success" ] || [ "${{ needs.docker-test.result }}" = "skipped" ]; then
          echo "✅ **Docker**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Docker**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.security-scan.result }}" = "success" ]; then
          echo "✅ **Security Scan**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Security Scan**: Completed with findings" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📈 **Workflow run**: [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY