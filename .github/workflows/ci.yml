---
name: ‚úÖ Simple CI
on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

permissions:
  contents: read
  # Required for creating check runs
  checks: write
  # Required for security events
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_CACHE_DIR: ~/.cache/pip
  PIP_DISABLE_PIP_VERSION_CHECK: 1

jobs:
  test:
    name: üß™ Tests & Code Quality
    runs-on: ${{ matrix.os }}
    env:
      PYTHONPATH: src
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.11']
        include:
          - os: windows-latest
            python-version: '3.11'
          - os: ubuntu-latest
            python-version: '3.12'

    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4

    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: üì¶ Cache Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.local/share/pip-cache
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ matrix.python-version }}-
          ${{ runner.os }}-python-

    - name: üîß Install Tools
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install pytest pytest-cov ruff mypy safety bandit

    - name: üß™ Validate Package Imports (non-fatal)
      run: |
        python - <<'PY'
        try:
            import telegram_audio_downloader as pkg
            print('‚úÖ Package imports successfully:', pkg.__name__)
        except Exception as e:
            print('‚ÑπÔ∏è Module not available, skipping import validation:', e)
        PY

    - name: üîí Security Checks
      run: |
        echo "üîç Running security vulnerability scan..."
        safety check --full-report || echo "‚ö†Ô∏è  Safety check completed with findings"

        echo "üîê Running code security analysis..."
        mkdir -p reports
        bandit -r . -f json -o reports/bandit.json || echo "‚ö†Ô∏è  Bandit analysis completed with findings"

    - name: üéØ Code Quality Checks
      run: |
        echo "üîç Running Ruff linter..."
        ruff check . --output-format=github
        echo "üìê Running type checks..."
        if [ -d "src" ]; then
          mypy src/ --ignore-missing-imports
        else
          echo "No src/ directory, skipping mypy"
        fi

    - name: üß™ Run Tests
      run: |
        if [ -d "tests" ]; then
          python -m pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=term
        else
          echo "No tests/ directory, skipping tests"
        fi
      continue-on-error: false

    - name: üìä Upload Coverage
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' && hashFiles('coverage.xml') != ''
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: true

    - name: üõ°Ô∏è Security Report
      if: always()
      run: |
        echo "## üîí Security Check Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Security scanning completed" >> $GITHUB_STEP_SUMMARY

  codeql:
    name: üîé CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
      - name: ‚öôÔ∏è Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          config-file: ./.github/codeql/codeql-config.yml
      - name: üß™ Analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  docker-test:
    name: üê≥ Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'docker')

    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4

    - name: üèóÔ∏è Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üê≥ Test Docker Build
      run: |
        if [ -f "Dockerfile" ]; then
          docker buildx build --platform linux/amd64 -t telegram-audio-downloader:test . --load
          echo "‚úÖ Docker build successful"
        else
          echo "‚ö†Ô∏è No Dockerfile found, skipping Docker test"
        fi

  security-scan:
    name: üõ°Ô∏è Dependency Security Scan
    runs-on: ubuntu-latest
    needs: test
    # Run only on main branch or for pull requests
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4

    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üîß Install Security Tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit[sarif]

    - name: üõ°Ô∏è Run Dependency Security Scan
      id: security
      continue-on-error: true
      run: |
        echo "Running dependency security scan..."
        safety check --full-report --output-format json > security-report.json || echo "Security scan completed"
        echo "exit_code=$?" >> $GITHUB_OUTPUT

    - name: üîí Run Bandit (SARIF)
      run: |
        mkdir -p reports
        bandit -r . -f sarif -o reports/bandit.sarif || true

    - name: üì• Upload SARIF (Bandit)
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: reports/bandit.sarif

    - name: üìã Security Scan Summary
      run: |
        echo "## üõ°Ô∏è Dependency Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f "security-report.json" ]; then
          echo "‚úÖ Security scan report generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ÑπÔ∏è No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        fi

  notify:
    name: üì¢ CI Results
    runs-on: ubuntu-latest
    needs: [test, docker-test, security-scan, codeql]
    if: always() && github.event_name == 'push'

    steps:
    - name: üìä Report Status
      run: |
        echo "## üìä CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üöÄ **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "üìù **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "‚úÖ **Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Tests**: Failed or skipped" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.docker-test.result }}" = "success" ] || [ "${{ needs.docker-test.result }}" = "skipped" ]; then
          echo "‚úÖ **Docker**: Passed/Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Docker**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.security-scan.result }}" = "success" ]; then
          echo "‚úÖ **Security Scan**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **Security Scan**: Completed with findings" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.codeql.result }}" = "success" ]; then
          echo "‚úÖ **CodeQL**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **CodeQL**: Completed with findings" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìà **Workflow run**: [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY