name: 🔍 Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  code-quality:
    name: 🔍 Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
      fail-fast: false
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: ⬆️ Upgrade pip
        run: |
          python -m pip install --upgrade pip wheel setuptools
      
      - name: 📦 Install dependencies
        run: |
          pip install -e ".[dev]"
          pip install pre-commit
      
      - name: 📋 Display environment info
        run: |
          python --version
          pip --version
          pip list
      
      - name: 🔍 Run pre-commit hooks
        run: |
          pre-commit run --all-files --show-diff-on-failure
        continue-on-error: true
      
      - name: 🐍 Lint with Ruff
        run: |
          ruff check src tests --output-format=github
        continue-on-error: true
      
      - name: 🖤 Check code formatting with Black
        run: |
          black --check --diff src tests
        continue-on-error: true
      
      - name: 📋 Check import sorting with isort  
        run: |
          isort --check-only --diff src tests
        continue-on-error: true
      
      - name: 🔍 Lint with flake8
        run: |
          flake8 src tests --statistics --tee --output-file=flake8-report.txt
        continue-on-error: true
      
      - name: 🔒 Security check with Bandit
        run: |
          bandit -r src -f json -o bandit-report.json
          bandit -r src -f txt
        continue-on-error: true
      
      - name: 🛡️ Check dependencies with Safety
        run: |
          pip install safety
          safety check --full-report --output safety-report.txt
          safety check --json --output safety-report.json
          # Fail the build if critical vulnerabilities are found
          if grep -q 'CRITICAL' safety-report.txt; then
            echo "Critical security vulnerabilities found!"
            cat safety-report.txt
            exit 1
          fi
        continue-on-error: false
      
      - name: 🔍 Type checking with MyPy
        run: |
          mypy src --html-report mypy-report --txt-report mypy-report
          # Check for any type errors in the report
          if [ -f "mypy-report/index.txt" ] && [ -s "mypy-report/index.txt" ]; then
            echo "Type checking errors found:"
            cat mypy-report/index.txt
            exit 1
          fi
        continue-on-error: false
        
      - name: 🔒 Check for secrets in code
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml
          report-format: sarif
          report-path: gitleaks-report.sarif
          no-git: false
          verbose: true
        continue-on-error: false
        
      - name: 🛡️ Run Bandit security scanner
        run: |
          pip install bandit
          bandit -r src -f json -o bandit-report.json
          bandit -r src -f txt -o bandit-report.txt
          # Fail on high severity issues
          if grep -q 'High' bandit-report.txt; then
            echo "High severity security issues found!"
            cat bandit-report.txt
            exit 1
          fi
        continue-on-error: false
      
      - name: 📊 Code complexity analysis
        run: |
          radon cc src --show-complexity --min B
          radon mi src --show --min B
          xenon --max-absolute B --max-modules A --max-average A src
        continue-on-error: true
      
      - name: 🧹 Dead code detection
        run: |
          vulture src --min-confidence 80
        continue-on-error: true
      
      - name: 📊 Generate code metrics
        run: |
          echo "## 📊 Code Quality Metrics" > code-quality-report.md
          echo "" >> code-quality-report.md
          
          echo "### 🔍 Linting Results" >> code-quality-report.md
          if [ -f flake8-report.txt ]; then
            echo "**Flake8 Issues:**" >> code-quality-report.md
            echo '```' >> code-quality-report.md
            tail -10 flake8-report.txt >> code-quality-report.md || echo "No issues found" >> code-quality-report.md
            echo '```' >> code-quality-report.md
          fi
          
          echo "" >> code-quality-report.md
          echo "### 🔒 Security Analysis" >> code-quality-report.md
          if [ -f bandit-report.json ]; then
            echo "**Bandit Security Issues:**" >> code-quality-report.md
            echo '```json' >> code-quality-report.md
            jq '.results | length' bandit-report.json >> code-quality-report.md || echo "0" >> code-quality-report.md
            echo '```' >> code-quality-report.md
          fi
          
          echo "" >> code-quality-report.md
          echo "### 📊 Complexity Metrics" >> code-quality-report.md
          echo "**Cyclomatic Complexity:**" >> code-quality-report.md
          echo '```' >> code-quality-report.md
          radon cc src --show-complexity --min C || echo "All functions have acceptable complexity" >> code-quality-report.md
          echo '```' >> code-quality-report.md

      - name: 📤 Upload reports as artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: code-quality-reports-${{ matrix.python-version }}
          path: |
            flake8-report.txt
            bandit-report.json
            safety-report.json
            mypy-report/
            code-quality-report.md
          retention-days: 30
      
      - name: 📝 Comment PR with quality report
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## 🔍 Code Quality Report\n\n';
            
            try {
              const report = fs.readFileSync('code-quality-report.md', 'utf8');
              comment += report;
            } catch (error) {
              comment += 'Code quality report generation failed.\n';
            }
            
            comment += '\n---\n';
            comment += `**Python Version:** ${{ matrix.python-version }}\n`;
            comment += `**Workflow:** [${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  dependency-audit:
    name: 🔍 Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: 📦 Install pip-audit
        run: |
          python -m pip install pip-audit
      
      - name: 🔍 Audit dependencies
        run: |
          pip-audit --format=json --output=pip-audit-report.json
          pip-audit --format=markdown --output=pip-audit-report.md
        continue-on-error: true
      
      - name: 📤 Upload audit results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-audit-report
          path: |
            pip-audit-report.json
            pip-audit-report.md

  documentation-check:
    name: 📚 Documentation Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository  
        uses: actions/checkout@v5
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: 📦 Install documentation tools
        run: |
          pip install pydocstyle doc8 sphinx
      
      - name: 📚 Check docstring style
        run: |
          pydocstyle src --convention=google
        continue-on-error: true
      
      - name: 📄 Check documentation format
        run: |
          doc8 docs/ --max-line-length=120
        continue-on-error: true