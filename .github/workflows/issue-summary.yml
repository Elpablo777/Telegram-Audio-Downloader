name: Issue Summary
on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: read

jobs:
  summarize:
    runs-on: ubuntu-latest
    steps:
      - name: Summarize Issue with OpenAI
        uses: actions/github-script@v7
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body || '';
            
            // If OpenAI API key is available, use it for intelligent summarization
            if (process.env.OPENAI_API_KEY) {
              try {
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
                  },
                  body: JSON.stringify({
                    model: 'gpt-3.5-turbo',
                    messages: [
                      {
                        role: 'system',
                        content: 'You are a helpful assistant that summarizes GitHub issues. Provide a concise summary that includes the main problem, context, and any specific details mentioned. Format your response in Markdown.'
                      },
                      {
                        role: 'user',
                        content: `Issue Title: ${issue.title}\n\nIssue Body: ${issueBody}`
                      }
                    ],
                    max_tokens: 300,
                    temperature: 0.3
                  })
                });
                
                if (response.ok) {
                  const data = await response.json();
                  const aiSummary = data.choices[0].message.content.trim();
                  
                  const summary = `## ðŸ¤– AI Issue Summary\n\n${aiSummary}\n\n---\n*This summary was automatically generated using OpenAI*`;
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    body: summary
                  });
                  return;
                }
              } catch (error) {
                console.log('OpenAI summarization failed, falling back to basic summary');
              }
            }
            
            // Fallback to basic summary if OpenAI is not configured or fails
            const summary = `## Issue Summary\n\n` +
                          `**Title:** ${issue.title}\n\n` +
                          `**Author:** ${issue.user.login}\n\n` +
                          `**Created:** ${new Date(issue.created_at).toDateString()}\n\n` +
                          `**Description:**\n` +
                          `${issueBody.substring(0, 500)}${issueBody.length > 500 ? '...' : ''}\n\n` +
                          `---\n` +
                          `*This summary was automatically generated by GitHub Actions*`;
            
            // Add the summary as a comment to the issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: summary
            });