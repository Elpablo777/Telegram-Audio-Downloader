name: 🔄 Continuous Monitoring
on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
  pull_request:
<<<<<<< HEAD
    branches:
      - main
# Minimal required permissions
permissions:
  contents: read
  issues: write  # Für das Erstellen von Issues bei kritischen Problemen
  pull-requests: write  # Für das Aktualisieren von PRs mit Metriken
=======
    branches: [ main ]

# Minimal required permissions for the workflow
permissions:
  contents: read  # For checking out code
  packages: read  # For downloading dependencies
  actions: read   # For reading workflow data
  security-events: write  # For security scanning
  checks: write   # For creating check runs
  pull-requests: write  # For PR comments
  issues: write   # For creating issues

>>>>>>> origin/main
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'

jobs:
  health-check:
    name: 🏥 System Health Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
        pip install psutil schedule radon bandit safety
        
    - name: 🔍 Run Health Check
      id: health_check
      run: |
        python scripts/monitoring/continuous_monitor.py check
        
        # Store results
        if [ -f "data/metrics/latest_health.json" ]; then
          echo "HEALTH_DATA<<EOF" >> $GITHUB_OUTPUT
          cat data/metrics/latest_health.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
        
    - name: 📊 Parse Health Results
      id: parse_results
      run: |
        if [ -f "data/metrics/latest_health.json" ]; then
          # Extract key metrics
          HEALTH_STATUS=$(python -c "
          import json
          with open('data/metrics/latest_health.json') as f:
              data = json.load(f)
              print(data['overall_health'])
          ")
          
          HEALTH_SCORE=$(python -c "
          import json
          with open('data/metrics/latest_health.json') as f:
              data = json.load(f)
              print(f\"{data['score']:.1f}\")
          ")
          
          ALERT_COUNT=$(python -c "
          import json
          with open('data/metrics/latest_health.json') as f:
              data = json.load(f)
              print(len(data['alerts']))
          ")
          
          echo "health_status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          echo "health_score=$HEALTH_SCORE" >> $GITHUB_OUTPUT
          echo "alert_count=$ALERT_COUNT" >> $GITHUB_OUTPUT
        fi
        
    - name: 📈 Upload Health Metrics
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: health-metrics-${{ github.run_id }}
        path: |
          data/metrics/
          data/logs/
          data/alerts/
        retention-days: 30
        
    - name: 🚨 Create Alert Issue
      if: steps.parse_results.outputs.health_status == 'CRITICAL'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read health data
          let healthData = {};
          try {
            healthData = JSON.parse(fs.readFileSync('data/metrics/latest_health.json', 'utf8'));
          } catch (error) {
            console.log('Could not read health data:', error);
            return;
          }
          
          // Create issue body
          const issueBody = `
          # 🚨 Critical System Health Alert
          
          **Health Status:** ${healthData.overall_health}  
          **Health Score:** ${healthData.score.toFixed(1)}/100  
          **Timestamp:** ${healthData.timestamp}
          
          ## 🚨 Active Alerts
          ${healthData.alerts.map(alert => `- ❌ ${alert}`).join('\n')}
          
          ## 💡 Recommendations
          ${healthData.recommendations.map(rec => `- 🔧 ${rec}`).join('\n')}
          
          ## 📊 System Metrics
          - **CPU Usage:** ${healthData.system_metrics.cpu_percent?.toFixed(1) || 'N/A'}%
          - **Memory Usage:** ${healthData.system_metrics.memory_percent?.toFixed(1) || 'N/A'}%
          - **Disk Usage:** ${healthData.system_metrics.disk_percent?.toFixed(1) || 'N/A'}%
          
          ## 🧪 Quality Metrics
          - **Test Coverage:** ${healthData.quality_metrics.test_coverage?.toFixed(1) || 'N/A'}%
          - **Lint Score:** ${healthData.quality_metrics.lint_score?.toFixed(1) || 'N/A'}%
          - **Type Coverage:** ${healthData.quality_metrics.type_coverage?.toFixed(1) || 'N/A'}%
          
          ## 🔒 Security Metrics
          - **Security Score:** ${healthData.security_metrics.bandit_score?.toFixed(1) || 'N/A'}%
          - **Secrets Found:** ${healthData.security_metrics.secrets_found || 0}
          
          ---
          
          **Workflow:** ${{ github.workflow }}  
          **Run ID:** ${{ github.run_id }}  
          **Commit:** ${{ github.sha }}
          
          > This issue was automatically created by the Continuous Monitoring system.
          `;
          
          // Check if similar issue already exists
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['critical-health-alert']
          });
          
          if (existingIssues.data.length === 0) {
            // Create new issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Critical System Health Alert - Score: ${healthData.score.toFixed(1)}/100`,
              body: issueBody,
              labels: ['critical-health-alert', 'monitoring', 'urgent']
            });
            
            console.log('Created critical health alert issue:', issue.data.number);
          } else {
            // Update existing issue
            const issue = existingIssues.data[0];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `## 🔄 Updated Health Status\n\n${issueBody}`
            });
            
            console.log('Updated existing critical health alert issue:', issue.number);
          }
          
    - name: ✅ Update Status Badge
      if: always()
      run: |
        # Create status badge data
        HEALTH_STATUS="${{ steps.parse_results.outputs.health_status || 'UNKNOWN' }}"
        HEALTH_SCORE="${{ steps.parse_results.outputs.health_score || '0.0' }}"
        
        # Determine badge color
        if [ "$HEALTH_STATUS" = "HEALTHY" ]; then
          COLOR="brightgreen"
        elif [ "$HEALTH_STATUS" = "WARNING" ]; then
          COLOR="yellow"
        elif [ "$HEALTH_STATUS" = "CRITICAL" ]; then
          COLOR="red"
        else
          COLOR="lightgrey"
        fi
        
        # Create badge JSON
        mkdir -p data/badges
        cat > data/badges/health-status.json << EOF
        {
          "schemaVersion": 1,
          "label": "health",
          "message": "$HEALTH_STATUS ($HEALTH_SCORE/100)",
          "color": "$COLOR"
        }
        EOF
        
    - name: 📊 Generate Health Report
      if: always()
      run: |
        # Generate markdown report
        python -c "
        import json
        import sys
        from datetime import datetime
        
        try:
            with open('data/metrics/latest_health.json') as f:
                data = json.load(f)
        except:
            print('No health data available')
            sys.exit(0)
        
        report = f'''# 🏥 System Health Report
        
        **Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}  
        **Workflow:** ${{ github.workflow }}  
        **Run ID:** ${{ github.run_id }}
        
        ## 📊 Overall Status
        
        | Metric | Value |
        |--------|-------|
        | **Health Status** | {data['overall_health']} |
        | **Health Score** | {data['score']:.1f}/100 |
        | **Active Alerts** | {len(data['alerts'])} |
        
        ## 💻 System Metrics
        
        | Metric | Value |
        |--------|-------|
        | CPU Usage | {data['system_metrics'].get('cpu_percent', 'N/A')}% |
        | Memory Usage | {data['system_metrics'].get('memory_percent', 'N/A')}% |
        | Disk Usage | {data['system_metrics'].get('disk_percent', 'N/A')}% |
        | Python Version | {data['system_metrics'].get('python_version', 'N/A')} |
        
        ## 🧪 Quality Metrics
        
        | Metric | Value |
        |--------|-------|
        | Test Coverage | {data['quality_metrics'].get('test_coverage', 'N/A')}% |
        | Lint Score | {data['quality_metrics'].get('lint_score', 'N/A')}% |
        | Type Coverage | {data['quality_metrics'].get('type_coverage', 'N/A')}% |
        | Complexity Score | {data['quality_metrics'].get('complexity_score', 'N/A')}% |
        | Documentation | {data['quality_metrics'].get('documentation_score', 'N/A')}% |
        
        ## ⚡ Performance Metrics
        
        | Metric | Value |
        |--------|-------|
        | Import Time | {data['performance_metrics'].get('import_time_ms', 'N/A')}ms |
        | Memory Usage | {data['performance_metrics'].get('memory_profile', {}).get('rss_mb', 'N/A')}MB |
        
        ## 🔒 Security Metrics
        
        | Metric | Value |
        |--------|-------|
        | Security Score | {data['security_metrics'].get('bandit_score', 'N/A')}% |
        | Safety Score | {data['security_metrics'].get('safety_score', 'N/A')}% |
        | Secrets Found | {data['security_metrics'].get('secrets_found', 'N/A')} |
        '''
        
        if data['alerts']:
            report += f'''
        ## 🚨 Active Alerts
        
        {chr(10).join(f'- ❌ {alert}' for alert in data['alerts'])}
        '''
        
        if data['recommendations']:
            report += f'''
        ## 💡 Recommendations
        
        {chr(10).join(f'- 🔧 {rec}' for rec in data['recommendations'])}
        '''
        
        with open('data/health-report.md', 'w') as f:
            f.write(report)
        
        print('Health report generated successfully')
        " 
        
    - name: 📤 Upload Health Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: health-report-${{ github.run_id }}
        path: data/health-report.md
        retention-days: 7

  quality-trends:
    name: 📈 Quality Trends Analysis  
    runs-on: ubuntu-latest
    needs: health-check
    if: always()
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v5
      
    - name: 📊 Download Previous Health Metrics
      uses: actions/download-artifact@v5
      continue-on-error: true
      with:
        pattern: health-metrics-*
        path: historical-metrics/
        
    - name: 📈 Analyze Quality Trends
      run: |
        python -c "
        import json
        import os
        from pathlib import Path
        from datetime import datetime
        
        # Collect all historical metrics
        metrics_history = []
        
        for metrics_dir in Path('historical-metrics').glob('health-metrics-*'):
            metrics_file = metrics_dir / 'data' / 'metrics' / 'latest_health.json'
            if metrics_file.exists():
                with open(metrics_file) as f:
                    try:
                        data = json.load(f)
                        metrics_history.append(data)
                    except:
                        continue
        
        if len(metrics_history) < 2:
            print('Not enough historical data for trend analysis')
            exit(0)
        
        # Sort by timestamp
        metrics_history.sort(key=lambda x: x['timestamp'])
        
        # Calculate trends
        latest = metrics_history[-1]
        previous = metrics_history[-2]
        
        score_trend = latest['score'] - previous['score']
        
        print(f'Score Trend: {score_trend:+.1f} points')
        print(f'Current Score: {latest[\"score\"]:.1f}/100')
        print(f'Previous Score: {previous[\"score\"]:.1f}/100')
        
        # Check for degradation
        if score_trend < -5:
            print('⚠️ Significant quality degradation detected!')
            with open(os.environ['GITHUB_ENV'], 'a') as f:
                f.write('QUALITY_DEGRADATION=true\n')
        "
        
    - name: 🚨 Alert on Quality Degradation
      if: env.QUALITY_DEGRADATION == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '📉 Quality Degradation Alert',
            body: `
            ## ⚠️ Quality Degradation Detected
            
            The continuous monitoring system has detected a significant drop in code quality metrics.
            
            **Triggered by:** ${{ github.workflow }} (Run #${{ github.run_id }})  
            **Commit:** ${{ github.sha }}
            
            Please review recent changes and run quality checks.
            
            ### Next Steps:
            1. Review recent commits for quality issues
            2. Run full test suite: \`make test\`
            3. Check linting: \`make lint\`
            4. Review code coverage: \`make coverage\`
            
            This issue was automatically created by the monitoring system.
            `,
            labels: ['quality-degradation', 'monitoring']
          });

  notification:
    name: 📢 Status Notification
    runs-on: ubuntu-latest
    needs: [health-check, quality-trends]
    if: always()
    
    steps:
    - name: 📊 Determine Notification Status  
      run: |
        HEALTH_STATUS="${{ needs.health-check.outputs.health_status || 'UNKNOWN' }}"
        
        if [ "$HEALTH_STATUS" = "CRITICAL" ]; then
          echo "🚨 Critical health status detected"
          echo "SEND_NOTIFICATION=true" >> $GITHUB_ENV
          echo "NOTIFICATION_LEVEL=critical" >> $GITHUB_ENV
        elif [ "$HEALTH_STATUS" = "WARNING" ]; then
          echo "⚠️ Warning health status detected"
          echo "SEND_NOTIFICATION=true" >> $GITHUB_ENV
          echo "NOTIFICATION_LEVEL=warning" >> $GITHUB_ENV
        else
          echo "✅ System health is good"
          echo "SEND_NOTIFICATION=false" >> $GITHUB_ENV
        fi
        
    - name: 📧 Send Notification
      if: env.SEND_NOTIFICATION == 'true'
      run: |
        echo "Would send ${{ env.NOTIFICATION_LEVEL }} notification"
        # TODO: Implement actual notification system (email, Slack, etc.)