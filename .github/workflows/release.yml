name: 📦 Release & Publish

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Manual trigger
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  test:
    name: 🧪 Test Before Release
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .[dev]

    - name: 🧪 Run Tests
      run: |
        pytest --cov=src/telegram_audio_downloader --cov-report=xml

    - name: 🔍 Quality Checks
      run: |
        flake8 src/ --count --max-complexity=10 --max-line-length=127 --statistics
        mypy src/telegram_audio_downloader --ignore-missing-imports || true

  build:
    name: 🏗️ Build Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for setuptools_scm

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install Build Dependencies
      run: |
        python -m pip install --upgrade pip build twine

    - name: 🏗️ Build Package
      run: |
        python -m build

    - name: 🔍 Check Package
      run: |
        twine check dist/*

    - name: 📊 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/

  docker:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🐳 Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: 🚀 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📊 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/

    - name: 🏷️ Get Version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: 📋 Generate Release Notes
      id: release_notes
      run: |
        # Extract release notes from CHANGELOG.md
        VERSION=${{ steps.version.outputs.version }}
        awk -v version="$VERSION" '
          /^## \[/ { 
            if (found) exit
            if (index($0, version)) found=1
            next
          }
          found && /^## \[/ { exit }
          found { print }
        ' CHANGELOG.md > RELEASE_NOTES.md
        
        # If no specific notes found, use default
        if [ ! -s RELEASE_NOTES.md ]; then
          echo "## What's Changed" > RELEASE_NOTES.md
          echo "- See [CHANGELOG.md](CHANGELOG.md) for detailed changes" >> RELEASE_NOTES.md
        fi

    - name: 🚀 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'rc') || contains(steps.version.outputs.version, 'beta') }}

    - name: 📦 Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: telegram-audio-downloader-${{ steps.version.outputs.version }}
        asset_content_type: application/zip

  publish-pypi:
    name: 📦 Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: 📊 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/

    - name: 🚀 Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true

  notify:
    name: 📢 Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [release, publish-pypi]
    if: always()
    
    steps:
    - name: 📊 Collect Results
      id: results
      run: |
        echo "release_status=${{ needs.release.result }}" >> $GITHUB_OUTPUT
        echo "pypi_status=${{ needs.publish-pypi.result }}" >> $GITHUB_OUTPUT

    - name: 📧 Send Success Notification
      if: needs.release.result == 'success'
      run: |
        echo "🎉 Release ${{ github.ref_name }} successful!"
        echo "✅ GitHub Release: Created"
        echo "✅ Docker Image: Published to ghcr.io"
        if [ "${{ needs.publish-pypi.result }}" = "success" ]; then
          echo "✅ PyPI Package: Published"
        fi

    - name: 🚨 Send Failure Notification
      if: needs.release.result == 'failure'
      run: |
        echo "❌ Release ${{ github.ref_name }} failed!"
        echo "Please check the workflow logs for details."

  update-docs:
    name: 📚 Update Documentation
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.result == 'success'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔄 Update Version References
      run: |
        VERSION=${{ github.ref_name }}
        # Update README badges
        sed -i "s|/v[0-9]\+\.[0-9]\+\.[0-9]\+|/$VERSION|g" README.md
        
        # Update Docker examples
        sed -i "s|telegram-audio-downloader:[^[:space:]]*|telegram-audio-downloader:$VERSION|g" README.md
        
        # Update installation docs
        find docs/ -name "*.md" -exec sed -i "s|/releases/tag/v[0-9]\+\.[0-9]\+\.[0-9]\+|/releases/tag/$VERSION|g" {} \;

    - name: 💾 Commit Version Updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git diff --quiet && git diff --staged --quiet || (
          git commit -m "📚 Update documentation for release ${{ github.ref_name }}"
          git push
        )

  performance-benchmark:
    name: 📊 Performance Benchmark
    runs-on: ubuntu-latest
    needs: docker
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Run Performance Tests
      run: |
        # Pull the newly built image
        docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
        
        # Run performance benchmarks
        echo "🔄 Running performance benchmarks..."
        docker run --rm \
          -v $(pwd)/benchmarks:/app/benchmarks \
          ghcr.io/${{ github.repository }}:${{ github.ref_name }} \
          python benchmarks/performance_test.py

    - name: 📊 Upload Benchmark Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-benchmark-${{ github.ref_name }}
        path: benchmarks/results/