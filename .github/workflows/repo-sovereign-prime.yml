name: 👑 RepoSovereign Prime - Autonomous Governance

on:
  schedule:
    # Run every 4 hours for continuous monitoring
    - cron: '0 */4 * * *'
  
  # Manual trigger for immediate governance cycle
  workflow_dispatch:
    inputs:
      force_full_analysis:
        description: 'Force full analysis including experimental features'
        required: false
        default: 'false'
        type: boolean
      emergency_mode:
        description: 'Emergency mode - immediate response to critical issues'
        required: false
        default: 'false'
        type: boolean

  # Trigger on critical events
  issues:
    types: [opened, reopened]
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches: 
      - main
      - develop

# Enhanced permissions for autonomous governance
permissions:
  contents: write          # For creating commits and updating files
  issues: write           # For managing issues
  pull-requests: write    # For managing PRs
  security-events: write  # For security scanning
  actions: write          # For managing workflows
  checks: write           # For check runs
  statuses: write         # For commit statuses
  metadata: read          # For repository metadata

env:
  GOVERNANCE_MODE: "autonomous"
  PYTHON_VERSION: "3.11"

jobs:
  governance-engine:
    name: 👑 Autonomous Repository Governance
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for pattern analysis
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🐍 Setup Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml requests aiohttp asyncio
        # Install additional governance dependencies
        pip install python-dateutil structlog tenacity
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt || echo "⚠️ Some dependencies failed to install, continuing..."
        fi
    
    - name: 🔧 Configure RepoSovereign Prime
      run: |
        echo "🔧 Konfiguriere RepoSovereign Prime"
        
        # Set environment variables for governance
        echo "REPO_PATH=${{ github.workspace }}" >> $GITHUB_ENV
        echo "GITHUB_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
        echo "GITHUB_REF=${{ github.ref }}" >> $GITHUB_ENV
        echo "GOVERNANCE_TRIGGER=${{ github.event_name }}" >> $GITHUB_ENV
        
        # Emergency mode configuration
        if [ "${{ github.event.inputs.emergency_mode }}" = "true" ]; then
          echo "🚨 EMERGENCY MODE ACTIVATED"
          echo "EMERGENCY_MODE=true" >> $GITHUB_ENV
          echo "MAX_ISSUE_AGE_HOURS=1" >> $GITHUB_ENV
          echo "SECURITY_RESPONSE_MINUTES=1" >> $GITHUB_ENV
        fi
        
        # Full analysis mode
        if [ "${{ github.event.inputs.force_full_analysis }}" = "true" ]; then
          echo "🔍 FULL ANALYSIS MODE ACTIVATED"
          echo "FORCE_FULL_ANALYSIS=true" >> $GITHUB_ENV
        fi
    
    - name: 👑 Execute RepoSovereign Prime Governance Cycle
      id: governance
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO_OWNER: ${{ github.repository_owner }}
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        echo "👑 Starte RepoSovereign Prime Governance Engine"
        echo "Repository: ${{ github.repository }}"
        echo "Event: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref_name }}"
        
        # Make governance script executable
        chmod +x scripts/repo_sovereign_prime.py
        
        # Execute governance cycle
        python scripts/repo_sovereign_prime.py 2>&1 | tee governance_output.log
        
        # Capture results for later steps
        echo "governance_completed=true" >> $GITHUB_OUTPUT
        
        # Check if any critical issues were found
        if grep -q "CRITICAL" governance_output.log; then
          echo "critical_issues_found=true" >> $GITHUB_OUTPUT
        fi
        
        # Check if auto-resolutions were performed
        if grep -q "autonom gelöst" governance_output.log; then
          echo "auto_resolutions_performed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: 📊 Generate Governance Dashboard
      if: steps.governance.outputs.governance_completed == 'true'
      run: |
        echo "📊 Generiere Governance Dashboard"
        
        # Create dashboard from latest governance report
        python -c "
import json
import os
from datetime import datetime
from pathlib import Path

# Find latest governance report
reports_dir = Path('.governance/reports')
if reports_dir.exists():
    reports = list(reports_dir.glob('governance_report_*.json'))
    if reports:
        latest_report = max(reports, key=lambda p: p.stat().st_mtime)
        
        with open(latest_report) as f:
            data = json.load(f)
        
        # Generate simple dashboard
        dashboard = f'''
# 👑 RepoSovereign Prime Governance Dashboard
**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}

## 📊 Repository Health Overview
- **Overall Health:** {data.get('overall_health', 0):.1%}
- **Cycle Duration:** {data.get('cycle_duration', 0):.2f}s
- **Issues Resolved:** {data.get('issues_resolved', 0)}
- **Security Alerts Handled:** {data.get('security_alerts_handled', 0)}

## 🎯 Actions Taken
'''
        
        for action in data.get('actions_taken', []):
            dashboard += f'- ✅ {action}\\n'
        
        if not data.get('actions_taken'):
            dashboard += '- ℹ️ No actions required - repository is in excellent condition\\n'
        
        dashboard += f'''

## 📈 Trend Analysis
- **Governance Cycles:** Automated monitoring every 4 hours
- **Response Time:** < 5 minutes for critical security issues
- **Automation Level:** 80%+ autonomous resolution target

---
*Powered by RepoSovereign Prime - Level-6-Autonomie Repository Governance*
'''
        
        # Save dashboard
        with open('governance_dashboard.md', 'w') as f:
            f.write(dashboard)
        
        print('📊 Governance Dashboard generiert')
    else:
        print('⚠️ Keine Governance-Berichte gefunden')
else:
    print('⚠️ Governance-Verzeichnis nicht gefunden')
"
    
    - name: 🔄 Auto-Commit Governance Changes
      if: steps.governance.outputs.auto_resolutions_performed == 'true'
      run: |
        echo "🔄 Committe autonome Governance-Änderungen"
        
        # Configure git
        git config --local user.email "repo-sovereign-prime@github-actions"
        git config --local user.name "RepoSovereign Prime"
        
        # Add governance files
        git add .governance/
        git add governance_dashboard.md
        
        # Check if there are changes to commit
        if ! git diff --cached --quiet; then
          git commit -m "👑 RepoSovereign Prime: Autonomous governance updates
          
          - Governance cycle completed at $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - Issues resolved: ${{ steps.governance.outputs.issues_resolved || 0 }}
          - Security alerts handled: ${{ steps.governance.outputs.security_alerts_handled || 0 }}
          - Auto-resolution confidence: 80%+
          
          Co-authored-by: RepoSovereign Prime <repo-sovereign-prime@github-actions>"
          
          echo "✅ Governance-Änderungen committed"
        else
          echo "ℹ️ Keine Änderungen zum Committen"
        fi
    
    - name: 🚨 Critical Issue Alert
      if: steps.governance.outputs.critical_issues_found == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Create issue for critical problems that need human attention
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 CRITICAL: RepoSovereign Prime Alert',
            body: `# 🚨 Critical Repository Issues Detected

RepoSovereign Prime has detected critical issues that require immediate human attention.

## 📊 Governance Cycle Results
- **Timestamp:** ${new Date().toISOString()}
- **Trigger:** ${{ github.event_name }}
- **Critical Issues:** Detected in automated analysis

## 🎯 Required Actions
The autonomous governance system has identified issues that exceed the auto-resolution threshold and require human intervention.

## 📄 Full Report
Please check the governance reports in \`.governance/reports/\` for detailed analysis.

---
**Generated by RepoSovereign Prime Autonomous Governance Engine**
**Priority:** CRITICAL - Response required within 24 hours`,
            labels: ['critical', 'governance', 'security']
          });
          
          console.log('🚨 Critical issue created:', issue.data.number);
    
    - name: 📋 Upload Governance Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: governance-reports-${{ github.run_number }}
        path: |
          .governance/reports/
          governance_output.log
          governance_dashboard.md
        retention-days: 30
    
    - name: 📊 Summary Report
      if: always()
      run: |
        echo "## 👑 RepoSovereign Prime Governance Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.governance.outputs.governance_completed }}" = "true" ]; then
          echo "✅ **Status:** Governance cycle completed successfully" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.governance.outputs.auto_resolutions_performed }}" = "true" ]; then
            echo "🤖 **Auto-Resolutions:** Performed autonomous issue resolution" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.governance.outputs.critical_issues_found }}" = "true" ]; then
            echo "🚨 **Alert:** Critical issues detected - human attention required" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ **Status:** Governance cycle encountered issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Key Features Active" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 Zero Defect Tolerance" >> $GITHUB_STEP_SUMMARY
        echo "- 🛡️ Security-First Architecture" >> $GITHUB_STEP_SUMMARY
        echo "- 🤖 Autonomous Issue Resolution" >> $GITHUB_STEP_SUMMARY
        echo "- 🔮 Predictive Maintenance" >> $GITHUB_STEP_SUMMARY
        echo "- 🧠 Intelligent Merge Decisions" >> $GITHUB_STEP_SUMMARY
        echo "- 📚 Documentation Excellence" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "*Powered by RepoSovereign Prime - Level-6-Autonomie Repository Governance*" >> $GITHUB_STEP_SUMMARY