name: 🔄 Continuous Monitoring

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches: [ main ]

# Minimal required permissions for the workflow
permissions:
  contents: read  # For checking out code
  packages: read  # For downloading dependencies
  actions: read   # For reading workflow data
  security-events: write  # For security scanning
  checks: write   # For creating check runs
  pull-requests: write  # For PR comments
  issues: write   # For creating issues

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'

jobs:
  health-check:
    name: 🏥 System Health Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: 🏃 Run Health Check
      id: health
      run: |
        python scripts/health_check.py --format json > health_results.json
        echo "health_output=$(cat health_results.json)" >> $GITHUB_ENV
      continue-on-error: true

    - name: 📊 Parse Health Results
      id: parse
      run: |
        # Parse the health results and set outputs
        if [ -f health_results.json ]; then
          HEALTH_STATUS=$(jq -r '.status' health_results.json)
          HEALTH_SCORE=$(jq -r '.score' health_results.json)
          ALERT_COUNT=$(jq -r '.alert_count' health_results.json)
          
          echo "health_status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          echo "health_score=$HEALTH_SCORE" >> $GITHUB_OUTPUT
          echo "alert_count=$ALERT_COUNT" >> $GITHUB_OUTPUT
        else
          echo "health_status=UNKNOWN" >> $GITHUB_OUTPUT
          echo "health_score=0" >> $GITHUB_OUTPUT
          echo "alert_count=0" >> $GITHUB_OUTPUT
        fi

    - name: 📤 Upload Health Metrics
      uses: actions/upload-artifact@v3
      with:
        name: health-metrics
        path: health_results.json
        retention-days: 30

    - name: 📋 Upload Health Logs
      uses: actions/upload-artifact@v3
      with:
        name: health-logs
        path: health.log
        retention-days: 7

    - name: ⚠️ Upload Health Alerts
      if: steps.parse.outputs.alert_count > 0
      uses: actions/upload-artifact@v3
      with:
        name: health-alerts
        path: alerts.json
        retention-days: 7

    - name: 🚨 Critical Health Issue
      if: steps.parse.outputs.health_status == 'CRITICAL'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Critical Health Issue Detected',
            body: `
            ## 🚨 Critical Health Issue
            
            A critical health issue has been detected in the repository.
            
            **Health Score:** ${{ steps.parse.outputs.health_score }}
            **Alert Count:** ${{ steps.parse.outputs.alert_count }}
            
            Please investigate immediately.
            
            ### Health Details
            \`\`\`json
            ${{ env.health_output }}
            \`\`\`
            `,
            labels: ['health', 'critical', 'automated-issue']
          })

    - name: 📈 Update Health Status Badge
      run: |
        # Update the health status badge
        HEALTH_STATUS="${{ steps.parse.outputs.health_status }}"
        HEALTH_SCORE="${{ steps.parse.outputs.health_score }}"
        
        # Create or update badge
        echo "HEALTH_STATUS=$HEALTH_STATUS" >> $GITHUB_ENV
        echo "HEALTH_SCORE=$HEALTH_SCORE" >> $GITHUB_ENV

    - name: 📊 Generate Health Report
      run: |
        # Generate a markdown report
        cat > health_report.md << 'EOF'
        # 🏥 System Health Report
        
        ## Status: ${{ steps.parse.outputs.health_status }}
        ## Score: ${{ steps.parse.outputs.health_score }}/100
        
        ### Details
        - Alert Count: ${{ steps.parse.outputs.alert_count }}
        - Timestamp: $(date -u)
        
        ### Raw Data
        ```json
        ${{ env.health_output }}
        ```
        EOF

    - name: 📤 Upload Health Report
      uses: actions/upload-artifact@v3
      with:
        name: health-report
        path: health_report.md
        retention-days: 30

  quality-trends:
    name: 📈 Quality Trends Analysis
    runs-on: ubuntu-latest
    needs: health-check

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📥 Download Historical Metrics
      uses: actions/download-artifact@v3
      with:
        name: health-metrics
        path: ./historical

    - name: 📊 Analyze Quality Trends
      id: trends
      run: |
        # Analyze quality trends
        echo "Calculating quality trends..."
        python scripts/analyze_trends.py --history ./historical
        TREND=$(python -c "import json; print('degrading' if json.load(open('trend.json'))['score_diff'] < 0 else 'improving')")
        echo "quality_trend=$TREND" >> $GITHUB_OUTPUT

    - name: ⚠️ Alert on Quality Degradation
      if: steps.trends.outputs.quality_trend == 'degrading'
      run: |
        echo '⚠️ Significant quality degradation detected!'
        with open(os.environ['GITHUB_ENV'], 'a') as f:
            f.write('QUALITY_DEGRADATION=true\n')

    - name: 🚨 Alert on Quality Degradation
      if: env.QUALITY_DEGRADATION == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '📉 Quality Degradation Alert',
            body: `
            ## ⚠️ Quality Degradation Detected
            
            The code quality has significantly degraded compared to historical trends.
            
            Please review recent changes and take corrective action.
            `,
            labels: ['quality', 'degradation', 'automated-issue']
          })

  notification:
    name: 📢 Status Notification
    runs-on: ubuntu-latest
    needs: [health-check, quality-trends]
    if: always()

    steps:
    - name: 📊 Determine Notification Status  
      run: |
        HEALTH_STATUS="${{ needs.health-check.outputs.health_status || 'UNKNOWN' }}"

        if [ "$HEALTH_STATUS" = "CRITICAL" ]; then
          echo "🚨 Critical health status detected"
          echo "SEND_NOTIFICATION=true" >> $GITHUB_ENV
          echo "NOTIFICATION_LEVEL=critical" >> $GITHUB_ENV
        elif [ "$HEALTH_STATUS" = "WARNING" ]; then
          echo "⚠️ Warning health status detected"
          echo "SEND_NOTIFICATION=true" >> $GITHUB_ENV
          echo "NOTIFICATION_LEVEL=warning" >> $GITHUB_ENV
        else
          echo "✅ System health is good"
          echo "SEND_NOTIFICATION=false" >> $GITHUB_ENV
        fi

    - name: 📧 Send Notification
      if: env.SEND_NOTIFICATION == 'true'
      run: |
        echo "Would send ${{ env.NOTIFICATION_LEVEL }} notification"
        # TODO: Implement actual notification system (email, Slack, etc.)