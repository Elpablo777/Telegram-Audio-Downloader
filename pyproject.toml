[build-system]
requires = ["setuptools>=42"]
build-backend = "setuptools.build_meta"

[project]
name = "telegram-audio-downloader"
version = "1.1.1"
description = "A powerful tool to download and manage audio files from Telegram groups"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "Elpablo777", email = "hannover84@msn.com" }
]
license = { text = "MIT" }
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
]
dependencies = [
    "telethon>=1.34.0",
    "python-dotenv>=1.0.1",
    "tqdm>=4.66.1",
    "mutagen>=1.47.0",
    "pydub>=0.25.1",
    "peewee>=3.17.1",
    "click>=8.1.7",
    "rich>=13.7.0",
    "aiofiles>=23.2.1",
    "psutil>=6.1.0,<7.0.0",
    "cryptography>=44.0.1",
    "pydantic>=2.11.7,<3.0.0",
    "requests>=2.32.5",
    "urllib3>=2.5.0",
    "aiohttp>=3.12.14",
    "python-dateutil>=2.8.2",
    "fuzzywuzzy>=0.18.0",
    "python-Levenshtein>=0.21.0",
    "pyyaml>=6.0",
    "structlog>=23.1.0",
    "tenacity>=8.2.0",
    "plyer>=2.1.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.3.1",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "pytest-xdist>=3.3.1",
    "black>=23.3.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-bugbear>=23.3.23",
    "flake8-comprehensions>=3.12.0",
    "flake8-simplify>=0.19.3",
    "mypy>=1.3.0",
    "pylint>=2.17.4",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "pre-commit>=3.3.0",
    "radon>=6.0.1",
    "xenon>=0.9.0",
    "vulture>=2.7"
]

[project.scripts]
telegram-audio-downloader = "telegram_audio_downloader.cli:main"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
src_paths = ["src", "tests"]
known_first_party = ["telegram_audio_downloader"]

# Mypy Configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "telethon.*",
    "tqdm.*", 
    "mutagen.*",
    "pydub.*",
    "peewee.*"
]
ignore_missing_imports = true

# Pylint Configuration
[tool.pylint.main]
jobs = 0  # Use all available processors
safe-imports = "no"

[tool.pylint.messages_control]
disable = [
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "missing-module-docstring",
    "line-too-long",  # Handled by black
    "invalid-name",
    "duplicate-code"
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-complexity = 10
max-args = 8
max-locals = 20
max-returns = 6
max-branches = 15
max-statements = 60

# Coverage Configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "src/telegram_audio_downloader/__main__.py",
    "setup.py"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\\\bProtocol\\\\):",
    "@(abc\\\\.)?abstractmethod"
]
show_missing = true
skip_covered = false
skip_empty = false
sort = "Cover"
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit Security Configuration
[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101"]  # Skip assert_used test

# Pytest Configuration  
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "network: marks tests as requiring network access",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
    "error_injection: marks tests as error injection tests",
    "data_setup: marks tests as data setup tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]
log_level = "INFO"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Ruff Configuration (Modern Fast Linter)
[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PL",  # pylint
    "TRY", # tryceratops
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "TRY003", # avoid specifying long messages outside the exception class
]
target-version = "py311"
line-length = 88
src = ["src", "tests"]

[tool.ruff.per-file-ignores]
"tests/*" = ["ARG", "FBT", "PLR2004", "S101"]
"src/telegram_audio_downloader/__init__.py" = ["F401"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["telegram_audio_downloader"]

# Vulture Configuration (Dead Code Detection)
[tool.vulture]
min_confidence = 80
paths = ["src", "tests"]
exclude = ["*migrations*"]
ignore_decorators = ["@app.route", "@require_*"]
ignore_names = ["args", "kwargs", "_"]
sort_by_size = true