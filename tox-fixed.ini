[tox]
# Tox configuration for comprehensive testing across environments (Fixed Version)
envlist = 
    py{38,39,310,311,312}
    lint
    type-check
    security
    docs
minversion = 4.0
skip_missing_interpreters = true

[gh-actions]
# GitHub Actions Python version mapping
python =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311, lint, type-check, security, docs
    3.12: py312

[testenv]
# Base test environment configuration
description = Run unit tests with pytest
package = wheel
wheel_build_env = .pkg
deps = 
    pytest>=7.3.1
    pytest-asyncio>=0.21.0
    pytest-cov>=4.1.0
    pytest-mock>=3.11.1
    pytest-xdist>=3.3.1
extras = test
setenv =
    PYTHONPATH = {toxinidir}/src
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
    PY_COLORS = 1
    # Test environment variables
    TESTING = true
    LOG_LEVEL = DEBUG
    DATABASE_URL = sqlite:///:memory:
    API_ID = 123456
    API_HASH = test_hash_for_testing
    SESSION_NAME = test_session
commands = 
    python -c "import sys; print('Python version:', sys.version)"
    pytest {posargs:tests/} \
        --cov=telegram_audio_downloader \
        --cov-report=term-missing \
        --junit-xml={toxworkdir}/junit-{envname}.xml \
        -v \
        --tb=short

[testenv:lint]
# Linting with multiple tools
description = Run linting checks with ruff and flake8
deps = 
    ruff>=0.1.0
    flake8>=6.0.0
commands = 
    ruff check src/ tests/ --statistics
    flake8 src/ tests/ --statistics

[testenv:format]
# Code formatting check
description = Check code formatting with black and isort
deps = 
    black>=23.3.0
    isort>=5.12.0
commands = 
    black src/ tests/ --check --diff
    isort src/ tests/ --check-only --diff

[testenv:format-fix]
# Auto-fix code formatting
description = Auto-fix code formatting
deps = 
    black>=23.3.0
    isort>=5.12.0
commands = 
    black src/ tests/
    isort src/ tests/

[testenv:type-check]
# Type checking with mypy
description = Run type checking with mypy
deps = 
    mypy>=1.3.0
    types-requests
    types-setuptools
    types-PyYAML
extras = dev
commands = 
    mypy src/telegram_audio_downloader/

[testenv:security]
# Security checks with bandit
description = Run security checks
deps = 
    bandit>=1.7.5
commands = 
    bandit -r src/ -f txt

[testenv:docs]
# Documentation building
description = Build documentation
deps = 
    sphinx>=6.2.1
    sphinx-rtd-theme>=1.2.2
    myst-parser>=2.0.0
extras = docs
changedir = docs
commands = 
    sphinx-build -W -b html . {toxworkdir}/docs-html

[testenv:manual-tests]
# Manual test execution to bypass pytest issues
description = Run tests manually to bypass pytest plugin conflicts
deps = 
extras = test
commands = 
    python scripts/run_tests_manually.py

[testenv:clean]
# Clean up test artifacts
description = Clean up test artifacts
deps = 
skip_install = true
commands = 
    python -c "import shutil, os; [shutil.rmtree(d) for d in ['.tox', '.pytest_cache', 'data/coverage'] if os.path.exists(d)]"