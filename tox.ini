[tox]
# Tox configuration for comprehensive testing across environments
envlist = 
    py{38,39,310,311,312}
    pypy{38,39}
    lint
    type-check
    security
    docs
    coverage
    integration
    performance
    compatibility
minversion = 4.0
skip_missing_interpreters = true

[gh-actions]
# GitHub Actions Python version mapping
python =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311, lint, type-check, security, docs, coverage
    3.12: py312
    pypy-3.8: pypy38
    pypy-3.9: pypy39

[testenv]
# Base test environment configuration
description = Run unit tests with pytest
package = wheel
wheel_build_env = .pkg
deps = 
    pytest>=7.3.1
    pytest-asyncio>=0.21.0
    pytest-cov>=4.1.0
    pytest-mock>=3.11.1
    pytest-xdist>=3.3.1
    pytest-benchmark>=4.0.0
    pytest-html>=3.1.1
    pytest-json-report>=1.5.0
    coverage>=7.2.5
    factory-boy>=3.2.1
    freezegun>=1.2.2
extras = test
setenv =
    PYTHONPATH = {toxinidir}/src
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
    PY_COLORS = 1
    # Test environment variables
    TESTING = true
    LOG_LEVEL = DEBUG
    DATABASE_URL = sqlite:///:memory:
    API_ID = 123456
    API_HASH = test_hash_for_testing
    SESSION_NAME = test_session
commands = 
    pytest {posargs:tests/} \
        --cov=telegram_audio_downloader \
        --cov-report=term-missing \
        --cov-report=html:{toxworkdir}/htmlcov-{envname} \
        --cov-report=xml:{toxworkdir}/coverage-{envname}.xml \
        --junit-xml={toxworkdir}/junit-{envname}.xml \
        --html={toxworkdir}/report-{envname}.html \
        --self-contained-html \
        -v

[testenv:lint]
# Linting with multiple tools
description = Run linting checks with ruff, flake8, and pylint
deps = 
    ruff>=0.1.0
    flake8>=6.0.0
    flake8-docstrings>=1.7.0
    flake8-bugbear>=23.3.23
    flake8-comprehensions>=3.12.0
    flake8-simplify>=0.19.3
    flake8-import-order>=0.18.2
    flake8-annotations>=3.0.1
    pep8-naming>=0.13.3
    pylint>=2.17.4
commands = 
    ruff check src/ tests/ --statistics
    flake8 src/ tests/ --statistics --tee --output-file={toxworkdir}/flake8.txt
    pylint src/telegram_audio_downloader/ --output-format=text:{toxworkdir}/pylint.txt,colorized

[testenv:format]
# Code formatting with black and isort
description = Format code with black and isort
deps = 
    black>=23.3.0
    isort>=5.12.0
commands = 
    black src/ tests/ --check --diff
    isort src/ tests/ --check-only --diff

[testenv:format-fix]
# Auto-fix code formatting
description = Auto-fix code formatting
deps = 
    black>=23.3.0
    isort>=5.12.0
commands = 
    black src/ tests/
    isort src/ tests/

[testenv:type-check]
# Type checking with mypy
description = Run type checking with mypy
deps = 
    mypy>=1.3.0
    types-requests
    types-setuptools
    types-PyYAML
extras = dev
commands = 
    mypy src/telegram_audio_downloader/ \
        --html-report {toxworkdir}/mypy-html \
        --txt-report {toxworkdir}/mypy-txt \
        --junit-xml {toxworkdir}/mypy-junit.xml

[testenv:security]
# Security checks with bandit and safety
description = Run security checks
deps = 
    bandit>=1.7.5
    safety>=2.3.5
    pip-audit>=2.5.5
commands = 
    bandit -r src/ \
        -f json -o {toxworkdir}/bandit.json \
        -f txt -o {toxworkdir}/bandit.txt
    safety check \
        --json --output {toxworkdir}/safety.json \
        --continue-on-error
    pip-audit \
        --format=json --output={toxworkdir}/pip-audit.json \
        --desc

[testenv:docs]
# Documentation building and testing
description = Build and test documentation
deps = 
    sphinx>=6.2.1
    sphinx-rtd-theme>=1.2.2
    myst-parser>=2.0.0
    sphinx-autodoc-typehints>=1.23.0
    sphinx-copybutton>=0.5.2
    sphinxcontrib-mermaid>=0.9.2
extras = docs
changedir = docs
commands = 
    sphinx-build -W -b html . {toxworkdir}/docs-html
    sphinx-build -W -b linkcheck . {toxworkdir}/docs-linkcheck
    sphinx-build -W -b doctest . {toxworkdir}/docs-doctest

[testenv:docs-live]
# Live documentation server
description = Start live documentation server
deps = 
    {[testenv:docs]deps}
    sphinx-autobuild>=2021.3.14
commands = 
    sphinx-autobuild docs/ {toxworkdir}/docs-live \
        --host 0.0.0.0 \
        --port 8000 \
        --watch src/

[testenv:coverage]
# Coverage analysis and reporting
description = Generate coverage reports
deps = 
    coverage>=7.2.5
    coverage-badge>=1.1.0
depends = py311
commands = 
    coverage combine {toxworkdir}/.coverage.*
    coverage report --show-missing --fail-under=80
    coverage html -d {toxworkdir}/htmlcov-combined
    coverage xml -o {toxworkdir}/coverage-combined.xml
    coverage-badge -f -o {toxworkdir}/coverage.svg

[testenv:integration]
# Integration tests with real services
description = Run integration tests
deps = 
    {[testenv]deps}
    docker>=6.1.2
    testcontainers>=3.7.1
setenv = 
    {[testenv]setenv}
    INTEGRATION_TESTS = true
    TEST_TIMEOUT = 300
commands = 
    pytest tests/integration/ \
        --cov=telegram_audio_downloader \
        --cov-append \
        --timeout=300 \
        -v \
        -m integration

[testenv:performance]
# Performance and benchmark testing
description = Run performance benchmarks
deps = 
    {[testenv]deps}
    pytest-benchmark>=4.0.0
    pytest-profiling>=1.7.0
    memory-profiler>=0.61.0
    py-spy>=0.3.14
setenv = 
    {[testenv]setenv}
    PERFORMANCE_TESTS = true
commands = 
    pytest tests/performance/ \
        --benchmark-only \
        --benchmark-json={toxworkdir}/benchmark.json \
        --benchmark-histogram={toxworkdir}/benchmark-histogram \
        --benchmark-sort=mean \
        -v

[testenv:compatibility]
# Compatibility testing across different environments
description = Test compatibility across different environments
deps = 
    {[testenv]deps}
    tox-gh-actions>=3.1.0
setenv = 
    {[testenv]setenv}
    COMPATIBILITY_TESTS = true
commands = 
    pytest tests/compatibility/ \
        --tb=short \
        -v

[testenv:mutation]
# Mutation testing with mutmut
description = Run mutation testing
deps = 
    {[testenv]deps}
    mutmut>=2.4.3
commands = 
    mutmut run --paths-to-mutate=src/ \
        --tests-dir=tests/ \
        --runner="python -m pytest" \
        --use-coverage

[testenv:stress]
# Stress testing
description = Run stress tests
deps = 
    {[testenv]deps}
    locust>=2.15.1
setenv = 
    {[testenv]setenv}
    STRESS_TESTS = true
commands = 
    pytest tests/stress/ \
        --stress \
        --timeout=600 \
        -v

[testenv:build]
# Build and packaging tests
description = Test package building
deps = 
    build>=0.10.0
    twine>=4.0.2
    check-manifest>=0.49
commands = 
    check-manifest
    python -m build
    twine check dist/*

[testenv:clean]
# Clean up test artifacts
description = Clean up test artifacts and cache
deps = 
skip_install = true
commands = 
    python -c "
import shutil
import glob
import os

# Remove cache directories
for pattern in ['**/__pycache__', '**/.pytest_cache', '**/.mypy_cache', '**/.ruff_cache']:
    for path in glob.glob(pattern, recursive=True):
        if os.path.isdir(path):
            shutil.rmtree(path)
            print(f'Removed: {{path}}')

# Remove coverage files
for pattern in ['.coverage*', 'htmlcov', '*.coverage']:
    for path in glob.glob(pattern):
        if os.path.isfile(path):
            os.remove(path)
            print(f'Removed: {{path}}')
        elif os.path.isdir(path):
            shutil.rmtree(path)
            print(f'Removed: {{path}}')

# Remove build artifacts
for pattern in ['build/', 'dist/', '*.egg-info/']:
    for path in glob.glob(pattern):
        if os.path.isdir(path):
            shutil.rmtree(path)
            print(f'Removed: {{path}}')
"

[testenv:dev]
# Development environment setup
description = Setup development environment
deps = 
    {[testenv]deps}
    {[testenv:lint]deps}
    {[testenv:type-check]deps}
    {[testenv:security]deps}
    {[testenv:docs]deps}
    pre-commit>=3.3.0
    commitizen>=3.2.1
    bump2version>=1.0.1
    rich>=13.4.2
    ipython>=8.14.0
    jupyter>=1.0.0
commands = 
    pre-commit install
    pre-commit install --hook-type commit-msg
    python scripts/dev_tools.py check

# Global tox configuration
[flake8]
max-line-length = 88
extend-ignore = E203,W503,E501
per-file-ignores =
    __init__.py:F401
    tests/*:S101,S106,S608
exclude =
    .git,
    __pycache__,
    build,
    dist,
    *.egg-info,
    .tox,
    .venv,
    venv

[coverage:run]
source = src/telegram_audio_downloader
omit = 
    */tests/*
    */test_*
    */__main__.py
    */setup.py
    */conftest.py
branch = true
parallel = true

[coverage:report]
exclude_lines = 
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
show_missing = true
precision = 2
fail_under = 80

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml